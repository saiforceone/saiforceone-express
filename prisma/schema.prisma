// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserAccountType {
  CUSTOMER
  STAFF
  ADMIN
}

enum ContactType {
  EMAIL
  PHONE
}

enum NotificationType {
  GENERAL
  PACKAGE_STATUS_UPDATE
}

enum PackageStatus {
  RECEIVED_WAREHOUSE
  RECEIVED_CUSTOMS
  CUSTOMS_DETAINED
  RECEIVED_STORE
  DELIVERED
}

enum ShipmentDocType {
  INVOICE
  PERMIT
  OTHER
}

model User {
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  emailAddress      String             @unique
  password          String
  firstName         String
  lastName          String
  active            Boolean
  accountType       UserAccountType    @default(CUSTOMER)
  contacts          UserContact[]
  shipments         Shipment[]
  mailboxes         Mailbox[]
  notificationItems NotificationItem[]
}

model UserContact {
  id          String      @id @default(uuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  contactType ContactType
  detail      String
}

model Shipment {
  id                 String             @id @default(uuid())
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  userId             String
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  arrivalDate        DateTime
  totalDue           Decimal
  mailboxId          String
  mailbox            Mailbox            @relation(fields: [mailboxId], references: [id], onDelete: Cascade)
  itemDescription    String?
  packageType        String?
  source             String
  trackingNumber     String
  lastStatus         PackageStatus?     @default(RECEIVED_WAREHOUSE)
  measuredWeight     Decimal?
  shippingWeight     Decimal
  shipmentStatuses   ShipmentStatus[]
  shipmentCategoryId String
  shipmentCategory   ShipmentCategory   @relation(fields: [shipmentCategoryId], references: [id])
  shipmentDocuments  ShipmentDocument[]
}

model ShipmentCategory {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime
  category  String     @db.VarChar(100)
  Shipment  Shipment[]
}

model ShipmentStatus {
  id            String        @id @default(uuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  shipmentId    String
  shipment      Shipment      @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  packageStatus PackageStatus @default(RECEIVED_WAREHOUSE)
}

model Mailbox {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  shipments    Shipment[]
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  addressLine1 String     @db.VarChar(100)
  addressLine2 String     @db.VarChar(100)
  unitCode     String     @db.VarChar(100)
  zipCode      String     @db.VarChar(10)
  city         String     @db.VarChar(50)
  state        String     @db.VarChar(40)
  country      String     @db.VarChar(40)
}

model NotificationItem {
  id               String           @id @default(uuid())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  notificationType NotificationType @default(GENERAL)
  title            String           @db.VarChar(60)
  detail           String           @db.VarChar(200)
  userId           String
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ShipmentDocument {
  id           String          @id @default(uuid())
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  name         String
  url          String
  shipmentId   String
  shipment     Shipment        @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  documentType ShipmentDocType @default(OTHER)
}
